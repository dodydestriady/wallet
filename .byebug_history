c
@transaction.source_wallet.balance
@transaction.source_wallet
@current_entity.wallet.balance
permitted_params[:amount]
c
@current_entity.wallet.transactions
c
Wallet.first.id
Transaction.first
Transaction.count
Transaction.al
@current_entity.wallet.transactions
@current_entity.wallet
c
@current_entity.wallet
@current_entity
Wallet.last
Wallet.first
Wallet.find
@current_entity.wallet
c
@current_entity.expiry_token
@current_entity
c
Entity.last.expiry_token
Entity.first.expiry_token
Entity.all
@current_entity.reload.expiry_token
@current_entity.expiry_token
c
@current_entity.expiry_token
c
@current_entity.expiry_token
c
@current_entity.expiry_token
@current_entity
@current_entity.expiry_token
@current_entity
c
@current_entity
@current_entity.expiry_token
c
@current_entity.expiry_token
c
@current_entity.expiry_token
c
@current_entity.expiry_token
@current_entity.access_token
@current_entity
c
access_token
c
request.headers
request.headers[:Access-Token]
request.headers(:Access-Token)
access_token
c
entities(:one)
users(:one)
users
c
users
c
entities
users
c
users
users(:one)
c
users(:one)
c
users(:one)
c
entities(:one)
c
entities
c
entities
c
assert_equal JSON.parse(@response.body), {token: @user.reload.access_token }
assert_includes JSON.parse(@response.body), {token: @user.reload.access_token }
@user.reload.access_token
@user.access_token
JSON.parse(@response.body)
@response.body
c
self
source_wallet
c
current_entity.wallet.credit_transactions
c
current_entity.wallet
current_entity.wallet.credit_transactions
c
current_entity.wallet.credit_transactions
c
current_entity.wallet.credit_transactions
c
current_entity.wallet.transactions
current_entity.wallet.walletable
current_entity.wallet.transactions
current_entity.wallet.transactions.errors
current_entity.wallet.transactions
current_entity.wallet
current_entity.wallet.transactions
current_entity.wallet
current_entity.wallet.transactions
current_entity.wallet
c
current_entity.expiry_token
current_entity
c
request.headers['Access-Token']
request.headers['access_token']
c
request.headers['access_token']
request.headers['User-Agent']
request.headers[:access_token]
request.headers
c
request.headers
request.headers[:access_token]
c
request.headers[:access_token]
request.headers['access_token']
request.headers
headers
params
headers
c
head
headers
access_token
c
headers
headers[:access_token]
headers[:access_token[
headers
access_token
access_tokne
c
current_entity.email
current_entity.access_token
current_entity.expiry_token
current_entity.expiry_token >= Time.now
current_entity.expiry_token.present?
current_entity.expiry_token
current_entity
c
SecureRandom.base64
SecureRandom.hex
SecureRandom.alphanumeric
SecureRandom.alphanumeric()
SecureRandom.alphanumeric(20)
c
params[:email]
params
params[:name]
user
